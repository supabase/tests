name: CI for verification tests against the staging env (for iterating on the tests themselves)

on:
  pull_request:
    paths:
      - 'verification/**'
      - 'integration/**'
      - 'src/**'

env:
  GITHUB_TOTP: ${{ secrets.VERIFICATION_STAGE_GITHUB_TOTP }}
  GITHUB_USER: ${{ secrets.VERIFICATION_STAGE_GITHUB_USER }}
  GITHUB_PASS: ${{ secrets.VERIFICATION_STAGE_GITHUB_PASS }}
  SUPA_PLATFORM_URI: 'https://api.supabase.green/platform'
  SUPA_META_URI: 'https://api.supabase.green/platform/pg-meta'
  SUPA_DASHBOARD: 'https://app.supabase.green'

jobs:
  verification:
    name: Verification Tests
    runs-on: ubuntu-20.04
    timeout-minutes: 15
    defaults:
      run:
        working-directory: verification

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        working-directory: .

      - name: Install dependencies
        run: npm ci

      - name: Run verification tests
        run: npm run test:stage
        env:
          PROJECT_REF: 'dgkrksgaqkkgxjkhjygq'
          PROJECT_NAME: 'rectangular-keystone'
          SUPA_ORG_SLUG: 'special-purple-xfpfx2y'
          PROJECT_DB_PASS: ${{ secrets.VERIFICATION_STAGE_PROJECT_DB_PASS }}
          SUPA_PROJECT_DOMAIN: 'supabase.red'

      - uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: allure-results-verification-stage
          path: verification/allure-results
          retention-days: 1

  integration:
    name: Integration Tests
    runs-on: ubuntu-20.04
    timeout-minutes: 20

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create project
        env:
          SUPA_ORG_ID: '468'
          OUTPUT_FILE: '.env.migrate'
          PROJECT_JSON: 'project.json'
        run: |
          npm run project:create
          cp .env.migrate integration/.env.staging
          cp .env.migrate restore/.env.staging
          npm run project:migrate
          echo $(cat project.json | jq -r ".ref")

      - name: Install dependencies
        run: npm ci
        working-directory: integration

      - name: Run integration tests
        run: npm run test:stage
        working-directory: integration
        env:
          CLEANUP_USERS: false

      - name: Install dependencies (restore tests)
        run: npm ci
        working-directory: restore

      - name: Run restore tests preparation
        run: npm run prepare:stage
        working-directory: restore

      - name: Pause and restore project
        run: npm run project:restore
        env:
          PROJECT_JSON: 'project.json'

      - name: Run restore tests
        run: npm run test:stage
        working-directory: restore

      - name: Integration tests second run
        run: npm run test:stage
        working-directory: integration

      - uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: allure-results-integration-stage
          path: integration/allure-results
          retention-days: 1

      - uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: allure-results-restore-stage
          path: restore/allure-results
          retention-days: 1

      - name: Remove project
        run: npm run project:delete
        if: ${{ always() }}
        env:
          PROJECT_JSON: 'project.json'
